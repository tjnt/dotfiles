snippet import "import module"
import ${1:module}
endsnippet

snippet import_qualified "import qualified"
import qualified ${1:module} as ${2:alias}
endsnippet

snippet import_ByteString
import qualified Data.ByteString.Char8 as BS
import Data.Maybe (fromJust)
endsnippet

snippet import_List
import Data.List
endsnippet

snippet import_Monad
import Control.Monad
endsnippet

snippet main "main function"
main :: IO ()
main = do
    ${0:code}
    return ()
endsnippet

snippet func "function"
${1:name} :: ${2:type}
$1 ${3:args} = ${0:undefined}
endsnippet

snippet solve "solve function"
solve :: ${1:type}
solve ${2:args} = ${0:undefined}
endsnippet

snippet readString "入力から文字列を読み込む"
${0:var} <- getLine :: IO String
endsnippet

snippet readStringList "入力から文字列のリストを読み込む"
${0:var} <- words <$> getLine :: IO [String]
endsnippet

snippet readInt "入力から数値を読み込む"
${0:var} <- readLn :: IO Int
endsnippet

snippet readIntList "入力から数値のリストを読み込む"
${0:var} <- map read . words <$> getLine :: IO [Int]
endsnippet

snippet readLinesInt "複数行の入力から数値を読み込む"
${0:var} <- map read . lines <$> getContents :: IO [Int]
endsnippet

snippet readLinesIntList "複数行の入力から数値のリストを読み込む"
${0:var} <- map (map read . words) . lines <$> getContents :: IO [[Int]]
endsnippet

snippet readLinesIntTuple "複数行の入力から数値のタプルを読み込む"
${0:var} <- map ((\[a,b] -> (a,b)) . (map read . words))
    . lines <$> getContents :: IO [(Int,Int)]
endsnippet

snippet BSreadIntList "(BS)入力から数値のリストを読み込む"
${0:var} <- map (fst . fromJust . BS.readInt)
    . BS.words <$> BS.getLine :: IO [Int]
endsnippet

snippet BSreadLinesInt "(BS)複数行の入力から数値を読み込む"
${0:var} <- map (fst . fromJust . BS.readInt)
    . BS.lines <$> BS.getContents :: IO [Int]
endsnippet

snippet BSreadLinesIntList "(BS)複数行の入力から数値のリストを読み込む"
${0:var} <- map (map (fst . fromJust . BS.readInt) . BS.words)
    . BS.lines <$> BS.getContents :: IO [[Int]]
endsnippet

snippet BSreadLinesIntTuple "(BS)数行の入力から数値のタプルを読み込む"
${0:var} <- map ((\[a,b] -> (a,b)) . map (fst . fromJust . BS.readInt) . BS.words)
    . BS.lines <$> BS.getContents :: IO [(Int,Int)]
endsnippet

snippet BSreadLinesDoubleTuple "(BS)数行の入力から少数値のタプルを読み込む"
${0:var} <- map ((\[a,b] -> (a,b)) . map ((read :: String -> Double) . BS.unpack) . BS.words)
    . BS.lines <$> BS.getContents :: IO [(Double,Double)]
endsnippet

snippet debug "デバッグ関数"
import Debug.Trace
_t x = traceShow x x
endsnippet

# vim:set list expandtab:
