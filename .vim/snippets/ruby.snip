
# Keywords
snippet    if
abbr       if ... end
  if ${1:#:condition}
    ${2:TARGET}
  end

snippet    ifelse
abbr       if ... else ... end
  if ${1:#:condition}
    ${2:TARGET}
  else
    ${3}
  end

snippet    else
abbr       else ...
  else
    ${0}

snippet    elsif
abbr       elsif ...
alias      elseif
  elsif ${1:#:condition}
    ${0}

snippet    unless
abbr       unless ... end
  unless ${1:#:condition}
    ${2:TARGET}
  end

snippet    unlesselse
abbr       unless ... else ... end
  unless ${1:#:condition}
    ${2:TARGET}
  else
    ${3}
  end

snippet    for
abbr       for ... end
  for ${1:#:var} in ${2:#:container}
    ${3:TARGET}
  end

snippet    while
abbr       while ... end
  while ${1:#:condition}
    ${2:TARGET}
  end

snippet    until
abbr       until ... end
  until ${1:#:condition}
    ${2:TARGET}
  end

snippet    case
abbr       case ... when ... else ... end
options    head
  case ${1:#:var}
  when ${2:#:condition}
    ${3}
  else
    ${4}
  end

snippet    when
abbr       when ...
  when ${1:#:condition}
    ${0}

snippet    begin
abbr       begin ... rescue ... end
  begin
    ${1:TARGET}
  rescue ${2:#:StandardError} => ${3:e}
  end

snippet    class
abbr       class ... end
  class ${1:#:Name}
    ${2}
  end

snippet    module
abbr       module ... end
  module ${1:#:Name}
    ${2}
  end

snippet    def
abbr       def ... end
  def ${1:#:method_name}
    ${2:TARGET}
  end

snippet    defrescue
alias      defr
abbr       def ... rescue ... end
  def ${1:#:method_name}
    ${2:TARGET}
  rescue ${3:#:StandardError} => ${4:e}
    ${5}
  end

snippet    initialize
alias      definit
abbr       def initialize ... end
  def initialize(${1:#:args})
    ${2:TARGET}
  end

snippet    attr_reader
abbr       attr_reader :attr_names
  attr_reader :${1:#:attr_names}

snippet    attr_writer
abbr       attr_writer :attr_names
  attr_writer :${1:#:attr_names}

snippet    attr_accessor
abbr       attr_accessor :attr_names
  attr_accessor :${1:#:attr_names}

snippet    attr_protected
abbr       attr_protected :attr_names
  attr_protected :${1:#:attr_names}

snippet    attr_accessible
abbr       attr_accessible :attr_names
  attr_accessible :${1:#:attr_names}

snippet    accepts_nested
abbr       accepts_nested_attributes_for :association
  accepts_nested_attributes_for :${1:#:association}

snippet    lambda
abbr       lambda {|var| ... }
  lambda {|${1:#:var}| ${2} }

snippet    lam->
abbr       -> () { ... }
  -> (${1:#:var}) { ${2} }

snippet    yields
abbr       yields: ...
  :yields: ${1:#:var}

snippet    require
abbr       require 'file'
options    head
alias      req
  require '${1}'

snippet    requirerelative
abbr       require_relative 'file'
options    head
alias      reqr
  require_relative '${1}'

# Block
snippet    do
abbr       do ... end
  do
    ${1:TARGET}
  end

snippet    dovar
abbr       do |var| ... end
  do |${1:#:var}|
    ${2:TARGET}
  end

snippet    block
abbr       {...}
  {
    ${1:TARGET}
  }

snippet    block1
abbr       {|var| ... }
  {|${1:#:var}|
    ${2:TARGET}
  }

snippet    block2
abbr       {|var1, var2| ... }
  {|${1:#:var1}, ${2:#:var2}|
    ${3:TARGET}
  }

snippet    block3
abbr       {|var1, var2, var3| ... }
  {|${1:#:var1}, ${2:#:var2}, ${3:#:var3}|
    ${4:TARGET}
  }

snippet    blk
abbr       { ... }
  { ${1:TARGET} }

snippet    blk1
abbr       {|var1| ... }
  {|${1:#:var1}| ${2:TARGET} }

snippet    blk2
abbr       {|var1, var2| ... }
  {|${1:#:var1}, ${2:#:var2}| ${3:TARGET} }

snippet    blk3
abbr       {|var1, var2, var3| ... }
  {|${1:#:var1}, ${2:#:var2}, ${3:#:var3}| ${4:TARGET} }

# Numeric loop
snippet    times
options    word
	times {|${1:n}| ${2} }

snippet    step
options    word
  step(${1:#:num}) {|${2:n}| ${0} }

snippet    downto
options    word
  downto(${1:#:num}) {|${2:n}| ${0} }

snippet    upto
options    word
  upto(${1:#:num}) {|${2:n}| ${0} }

# Each
snippet    each
options    word
  each {|${1:#:item}| ${2} }

snippet    each_byte
options    word
  each_byte {|${1:#:item}| ${2} }

snippet    each_char
options    word
  each_char {|${1:#:item}| ${2} }

snippet    each_index
options    word
  each_index {|${1:#:item}| ${2} }

snippet    each_key
options    word
  each_key {|${1:#:item}| ${2} }

snippet    each_line
options    word
  each_line {|${1:#:item}| ${2} }

snippet    each_with_index
options    word
  each_with_index {|${1:#:item}| ${2} }

snippet    each_with_object
options    word
  each_with_object(${1:#:init}) {|${2:#:item}, ${3:#:mem}| ${4} }

snippet    each_pair
options    word
  each_pair{|${1:#:key}, ${2:#:value}| ${3} }

# Enumerable
snippet    map
options    word
  map {|${1:#:item}| ${2} }

snippet    all?
options    word
  all? {|${1:#:item}| ${2} }

snippet    any?
options    word
  any? {|${1:#:item}| ${2} }

snippet    chunk
options    word
  chunk {|${1:#:elt}| ${2} }

snippet    collect
options    word
  collect {|${1:#:item}| ${2} }

snippet    collect_concat
options    word
  collect_concat {|${1:#:item}| ${2} }

snippet    count
options    word
  count {|${1:#:item}| ${2} }

snippet    cycle
options    word
  cycle {|${1:#:item}| ${2} }

snippet    cycle()
options    word
  cycle(${1:#:num}) {|${2:#:item}| ${3} }

snippet    detect
options    word
  detect {|${1:#:item}| ${2} }

snippet    detect()
options    word
  detect(${1:#:proc}) {|${2:#:item}| ${3} }

snippet    drop_while
options    word
  drop_while {|${1:#:item}| ${2} }

snippet    each_cons
options    word
  each_cons(${1:#:num}) {|${2:#:item}| ${3} }

# working...

snippet    inject
options    word
  inject(${1:#:init}) {|${2:#:mem}, ${3:#:item}| ${4} }

snippet    reduce
options    word
  reduce(${1:#:init}) {|${2:#:mem}, ${3:#:item}| ${4} }

snippet    max
options    word
  max {|${1:#:a}, ${2:#:b}| ${3} }

snippet    max_by
options    word
  max_by {|${1:#:item}| ${2} }

snippet    min
options    word
  min {|${1:#:a}, ${2:#:b}| ${3} }

snippet    min_by
options    word
  min_by {|${1:#:item}| ${2} }

snippet    sort
options    word
  sort {|${1:#:a}, ${2:#:b}| ${3} }

snippet    sort_by
options    word
  sort_by {|${1:#:item}| ${2} }

# Misc
snippet    encoding
alias      enc
  # coding: utf-8
  ${0}

snippet    urlencode
  # coding: utf-8
  require 'erb'
  puts ERB::Util.url_encode '${1}'

snippet    main
options    head
  if __FILE__ == \$0
    ${0:TARGET}
  end

snippet    fileopen
alias      open
abbr       File.open(filename) do ... end
  File.open(${1:#:filename}, '${2:#:mode}') do |${3:io}|
    ${0:TARGET}
  end

# This idiom is only for legacy ruby such as 1.9.3
snippet    filedir-legacy-compatibility
alias      __dir__
abbr       File.dirname(...)
  File.dirname(File.expand_path(__FILE__))

snippet    glob
options    head
  Dir.glob(${1:'**/*'}) do |fname|
    ${0:TARGET}
  end

# measures of typo
snippet    edn
abbr       => end?
  end

# vim:set et ts=2 sts=2 sw=2 tw=0:
