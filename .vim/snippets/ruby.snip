
# Keywords
snippet		if
abbr			if ... end
	if ${1:#:condition}
		${2:TARGET}
	end

snippet		ifelse
abbr			if ... else ... end
	if ${1:#:condition}
		${2:TARGET}
	else
		${3:#:code}
	end

snippet		else
abbr			else ...
	else
		${0}

snippet		elsif
abbr			elsif ...
alias			elseif
	elsif ${1:#:condition}
		${0}

snippet		unless
abbr			unless ... end
	unless ${1:#:condition}
		${2:TARGET}
	end

snippet		unlesselse
abbr			unless ... else ... end
	unless ${1:#:condition}
		${2:TARGET}
	else
		${3:#:code}
	end

snippet		for
abbr			for ... end
	for ${1:#:var} in ${2:#:container}
		${3:TARGET}
	end

snippet		while
abbr			while ... end
	while ${1:#:condition}
		${2:TARGET}
	end

snippet		until
abbr			until ... end
	until ${1:#:condition}
		${2:TARGET}
	end

snippet		case
abbr			case ... when ... else ... end
options		head
	case ${1:#:var}
	when ${2:#:condition}
		${3:#:code}
	else
		${4:#:code}
	end

snippet		when
abbr			when ...
	when ${1:#:condition}
		${0}

snippet		begin-rescue
abbr			begin ... rescue ... end
	begin
		${1:TARGET}
	rescue ${2:#:StandardError} => ${3:e}
		${4:#:code}
	end

snippet		begin-ensure
abbr			begin ... ensure ... end
	begin
		${1:TARGET}
	ensure
		${2:#:code}
	end

snippet		begin-rescue-ensure
abbr			begin ... rescue ... ensure ... end
	begin
		${1:TARGET}
	rescue ${2:#:StandardError} => ${3:e}
		${4:#:code}
	ensure
		${5:#:code}
	end

snippet		rescue
abbr			rescue ...
	rescue ${1:#:StandardError} => ${2:e}
		${0}

snippet		ensure
abbr			ensure ...
	ensure
		${0}

snippet		class
abbr			class ... end
	class ${1:#:Name}
		${2:#:code}
	end

snippet		module
abbr			module ... end
	module ${1:#:Name}
		${2:#:code}
	end

snippet		def
abbr			def ... end
	def ${1:#:method_name}
		${2:TARGET}
	end

snippet		def-rescue
abbr			def ... rescue ... end
	def ${1:#:method_name}
		${2:TARGET}
	rescue ${3:#:StandardError} => ${4:e}
		${5:#:code}
	end

snippet		initialize
alias			definit
abbr			def initialize ... end
	def initialize(${1:#:args})
		${2:TARGET}
	end

snippet		attr_reader
abbr			attr_reader :attr_names
	attr_reader :${1:#:attr_names}

snippet		attr_writer
abbr			attr_writer :attr_names
	attr_writer :${1:#:attr_names}

snippet		attr_accessor
abbr			attr_accessor :attr_names
	attr_accessor :${1:#:attr_names}

snippet		attr_protected
abbr			attr_protected :attr_names
	attr_protected :${1:#:attr_names}

snippet		attr_accessible
abbr			attr_accessible :attr_names
	attr_accessible :${1:#:attr_names}

snippet		accepts_nested
abbr			accepts_nested_attributes_for :association
	accepts_nested_attributes_for :${1:#:association}

snippet		lambda
abbr			lambda {|var| ... }
	lambda {|${1:#:var}| ${2:#:code} }

snippet		lam->
abbr			-> () { ... }
	-> (${1:#:var}) { ${2:#:code} }

snippet		yields
abbr			yields: ...
	:yields: ${1:#:var}

snippet		require
abbr			require 'file'
options		head
alias			req
	require '${1:#:feature}'

snippet		requirerelative
abbr			require_relative 'file'
options		head
alias			reqr
	require_relative '${1:#:feature}'

# Block
snippet		do
abbr			do ... end
	do
		${1:TARGET}
	end

snippet		dovar
abbr			do |var| ... end
	do |${1:#:var}|
		${2:TARGET}
	end

snippet		block
abbr			{...}
	{
		${1:TARGET}
	}

snippet		block1
abbr			{|var| ... }
	{|${1:#:var}|
		${2:TARGET}
	}

snippet		block2
abbr			{|var1, var2| ... }
	{|${1:#:var1}, ${2:#:var2}|
		${3:TARGET}
	}

snippet		block3
abbr			{|var1, var2, var3| ... }
	{|${1:#:var1}, ${2:#:var2}, ${3:#:var3}|
		${4:TARGET}
	}

snippet		blk
abbr			{ ... }
	{ ${1:TARGET} }

snippet		blk1
abbr			{|var1| ... }
	{|${1:#:var1}| ${2:TARGET} }

snippet		blk2
abbr			{|var1, var2| ... }
	{|${1:#:var1}, ${2:#:var2}| ${3:TARGET} }

snippet		blk3
abbr			{|var1, var2, var3| ... }
	{|${1:#:var1}, ${2:#:var2}, ${3:#:var3}| ${4:TARGET} }

# Numeric loop
snippet		times
options		word
	times {|${1:n}| ${2:#:code} }

snippet		step
options		word
	step(${1:#:num}) {|${2:n}| ${3:#:code} }

snippet		downto
options		word
	downto(${1:#:num}) {|${2:n}| ${3:#:code} }

snippet		upto
options		word
	upto(${1:#:num}) {|${2:n}| ${3:#:code} }

# Each
snippet		each
options		word
	each {|${1:#:item}| ${2:#:code} }

snippet		each_byte
options		word
	each_byte {|${1:#:item}| ${2:#:code} }

snippet		each_char
options		word
	each_char {|${1:#:item}| ${2:#:code} }

snippet		each_index
options		word
	each_index {|${1:#:item}| ${2:#:code} }

snippet		each_key
options		word
	each_key {|${1:#:item}| ${2:#:code} }

snippet		each_line
options		word
	each_line {|${1:#:item}| ${2:#:code} }

snippet		each_with_index
options		word
	each_with_index {|${1:#:item}| ${2:#:code} }

snippet		each_with_object
options		word
	each_with_object(${1:#:init}) {|${2:#:item}, ${3:#:mem}| ${4:#:code} }

snippet		each_pair
options		word
	each_pair{|${1:#:key}, ${2:#:value}| ${3:#:code} }

# Enumerable
snippet		map
options		word
	map {|${1:#:item}| ${2:#:code} }

snippet		all?
options		word
	all? {|${1:#:item}| ${2:#:code} }

snippet		any?
options		word
	any? {|${1:#:item}| ${2:#:code} }

snippet		chunk
options		word
	chunk {|${1:#:elt}| ${2:#:code} }

snippet		collect
options		word
	collect {|${1:#:item}| ${2:#:code} }

snippet		collect_concat
options		word
	collect_concat {|${1:#:item}| ${2:#:code} }

snippet		count
options		word
	count {|${1:#:item}| ${2:#:code} }

snippet		cycle
options		word
	cycle {|${1:#:item}| ${2:#:code} }

snippet		cycle()
options		word
	cycle(${1:#:num}) {|${2:#:item}| ${3:#:code} }

snippet		detect
options		word
	detect {|${1:#:item}| ${2:#:code} }

snippet		detect()
options		word
	detect(${1:#:proc}) {|${2:#:item}| ${3:#:code} }

snippet		drop_while
options		word
	drop_while {|${1:#:item}| ${2:#:code} }

snippet		each_cons
options		word
	each_cons(${1:#:num}) {|${2:#:item}| ${3:#:code} }

# working...

snippet		inject
options		word
	inject(${1:#:init}) {|${2:#:mem}, ${3:#:item}| ${4:#:code} }

snippet		reduce
options		word
	reduce(${1:#:init}) {|${2:#:mem}, ${3:#:item}| ${4:#:code} }

snippet		max
options		word
	max {|${1:#:a}, ${2:#:b}| ${3:#:code} }

snippet		max_by
options		word
	max_by {|${1:#:item}| ${2:#:code} }

snippet		min
options		word
	min {|${1:#:a}, ${2:#:b}| ${3:#:code} }

snippet		min_by
options		word
	min_by {|${1:#:item}| ${2:#:code} }

snippet		sort
options		word
	sort {|${1:#:a}, ${2:#:b}| ${3:#:code} }

snippet		sort_by
options		word
	sort_by {|${1:#:item}| ${2:#:code} }

# Misc
snippet		encoding
alias			enc
	# coding: utf-8
	${0}

snippet		urlencode
	# coding: utf-8
	require 'erb'
	puts ERB::Util.url_encode '${1:#:code}'

snippet		main
options		head
	if __FILE__ == \$0
		${1:TARGET}
	end

snippet		fileopen
alias			open
abbr			File.open(filename) do ... end
	File.open(${1:#:filename}, '${2:#:mode}') do |${3:io}|
		${1:TARGET}
	end

# This idiom is only for legacy ruby such as 1.9.3
snippet		filedir-legacy-compatibility
alias			__dir__
abbr			File.dirname(...)
	File.dirname(File.expand_path(__FILE__))

snippet		glob
options		head
	Dir.glob(${1:'**/*'}) do |fname|
		${1:TARGET}
	end

# measures of typo
snippet		edn
abbr			=> end?
	end

# vim:set ts=2 sts=2 sw=2 tw=0 noet:
