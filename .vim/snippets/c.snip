snippet		if
abbr		if () {}
options		head
	if (${1:#:condition}) {
		${0:TARGET}
	}

snippet		else
abbr		else {}
	else {
		${0:TARGET}
	}

snippet		elseif
abbr		else if () {}
	else if (${1:#:condition}) {
		${0:TARGET}
	}

snippet		ifelse
abbr		if () {} else {}
options		head
	if (${1:#:condition}) {
		${2:TARGET}
	} else {
		${3:#:code}
	}

snippet		for
abbr		for () {}
options		head
	for (${1} = 0; $1 < ${2}; $1++) {
		${0:TARGET}
	}

snippet		while
abbr		while () {}
options		head
	while (${1:#:condition}) {
		${0:TARGET}
	}

snippet		do_while
abbr		do {} while ()
options		head
alias		do
	do {
		${0:TARGET}
	} while (${1:#:condition});

snippet		switch
abbr		switch () {}
options		head
	switch (${1:#:var}) {
		case ${2:#:condition}:
			${0:TARGET}
			break;
		default;
			break;
	}

snippet		function
abbr		func() {}
options		head
alias		func
	${1:void} ${2:#:name}(${3:#:args}) {
		${0:TARGET}
	}

snippet		struct
abbr		struct {}
options		head
	struct ${1:#:name}
	{
		${0:TARGET}
	};

snippet		struct_typedef
abbr		typedef struct {}
options		head
	typedef struct ${1:#:name}
	{
		${0:TARGET}
	} ${2:#:name};

snippet		enum
abbr		enum {}
options		head
	enum ${1:#:name}
	{
		${0:TARGET}
	};

snippet		main
abbr		main()
options		head
	int main(int argc, const char* argv[])
	{
		${0:TARGET}
		return 0;
	}

snippet		include
abbr		include <>
options		head
alias		inc, #include, #inc
	#include <${1:stdio.h}>

snippet		include2
abbr		include ""
options		head
alias		inc2, #include2, #inc2
	#include "${1:#:file.h}"

snippet		ifndef
options		head
abbr		#ifndef ... #define ... #endif
	#ifndef $1
	#define ${1:#:symbol}
	#endif // ${0:#:comment}

snippet		define
abbr		#define
options		head
alias		def, #define, #def
	#define ${1:#:symbol}

# Include-Guard
snippet		once
abbr		include-guard
options		head
	#ifndef ${1:#:symbol}
	#define $1
		${0:TARGET}
	#endif /* end of include guard */

# Ternary conditional operator
snippet		conditional
abbr		() ? ... : ...;
alias		cond
	(${1:#:condition}) ? ${2:#:a} : ${3:#:b};

snippet		typedef
abbr		typedef ...
options		head
	typedef ${1:#:base_type} ${2:#:custom_type};

snippet		printf
abbr		printf("...\n", ...);
	printf("${1}\n", ${2});

snippet		fprintf
abbr		fprintf(..., "...\n", ...);
	fprintf(${1:stderr}, "${2}\n"${3});

snippet		comment
alias /*
	/* ${1:#:comment} */
	${0}

snippet		sizeof
abbr		sizeof()
alias		size
	sizeof(${0:TARGET})

snippet		countof
abbr		(sizeof(array) / sizeof(array[0]))
	(sizeof(${0:TARGET}) / sizeof($0[0]))

snippet		fopen
abbr		fopen("...", "...");
	fopen("${1:#:path}", "${2:#:mode}");
	${0:TARGET}
	fclose(${3:#:fd});

snippet		fgets
abbr		fgets(row, length, file);
	fgets(${1:#:row}, ${2:#:len}, ${3:#:file});

snippet		helloworld
options		head
	#include <stdio.h>
	int main(int argc, const char* argv[])
	{
		puts("hello, world!");
		return 0;
	}

# vim:set et ts=4 sts=4 sw=4 tw=0 noet:
