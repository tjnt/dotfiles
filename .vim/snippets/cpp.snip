include c.snip

snippet		for
abbr		for () {}
options		head
	for (${1:#:type} ${2:#:var} = 0; $2 < ${3:#:end}; $2++) {
		${0:TARGET}
	}

snippet		for_cpp11
abbr		for (:) {}
options		head
	for (${1:auto} ${2:#:var} : ${3:#:container}) {
		${0:TARGET}
	}

snippet		struct_ctor
abbr		struct {}
options		head
	struct ${1:#:name}
	{
		$1(${2});
		${0:TARGET}
	};

snippet		class
abbr		class {}
options		head
	class ${1:#:name}
	{
	public:
		${0:TARGET}
	};

snippet		class_ctor
abbr		class {}
options		head
	class ${1:#:name}
	{
	public:
		$1(${2});
		${0:TARGET}
	};

snippet		try_catch
alias		try
abbr		try ... catch ...
options		head
	try {
		${1:TARGET}
	} catch (${2:std::exception} ${3:e}) {
		${3:#:code}
	}

snippet		try_catch_n
alias		try_n
abbr		try ... catch ...
options		head
	try {
		${1:TARGET}
	} catch (${2:...}) {
		${3:#:code}
	}

snippet		lambda
abbr		[](){}
	[${1:#:capture}](${2:#:args})${3:#:->type} { ${4:TARGET} }

# scoped enumeration ( C++11 feature )
snippet		enum_scoped
abbr		enum struct {}
options		head
	enum struct ${1:#:name}
	{
		${0:TARGET}
	};

# static assert ( C++11 feature )
snippet		static_assert
abbr		static_assert(,"")
	static_assert( ${1}, "${2}" );

delete		namespace
snippet		namespace
abbr		namespace {}
options		head
	namespace ${1:#:name}
	{
		${0:TARGET}
	} // namespace $1

snippet		static_cast
abbr		static_cast<>()
options		word
	static_cast<${1}>(${2})${0}

snippet		reinterpret_cast
abbr		reinterpret_cast<>()
options		word
	reinterpret_cast<${1}>(${2})${0}

snippet		const_cast
abbr		const_cast<>()
options		word
	const_cast<${1}>(${2})${0}

snippet		dynamic_cast
abbr		dynamic_cast<>()
options		word
	dynamic_cast<${1}>(${2})${0}

snippet		include
abbr		include <>
options		head
alias		inc, #inc, #include
	#include <${1:iostream}>

snippet		include2
abbr		include ""
options		head
alias		inc2, #include2, #inc2
	#include "${1:#:file.h}"

snippet		p
options		head
	std::cout << ${0:TARGET} << std::endl;

snippet		helloworld
options		head
	#include <iostream>
	int main(int argc, const char* argv[])
	{
		std::cout << "hello, world!" << std::endl;
		return 0;
	}

# vim:set et ts=4 sts=4 sw=4 tw=0 noet:
