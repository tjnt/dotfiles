"
" .pluginrc
"
" プラグイン毎の設定
"

" vim-plug {{{1
"
if has('vim_starting')
  let path = expand('$VIMLOCAL/autoload/plug.vim')
  if !filereadable(path) && executable('curl')
    echo 'install vim-plug...'
    call system('curl -fLo '.path.' --create-dirs '.
        \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
  endif
  " suppress warning
  if g:is_win
    let $PERL_BADLANG = 0
  endif
endif

if executable('git')
  call plug#begin(expand('$VIMLOCAL/plugins'))
else
  silent! call plug#begin(expand('$VIMLOCAL/plugins'))
endif

if (g:is_win && executable('mingw32-make')) || (has('unix') && executable('make'))
  function! BuildVimproc(info)
    if a:info.status == 'installed' || a:info.force
      if g:is_win
        call system('tools\\update-dll-mingw')
      elseif has('win32unix')
        call system('make -f make_cygwin.mak')
      else
        call system('make')
      endif
    endif
  endfunction
  Plug 'Shougo/vimproc.vim', { 'do': function('BuildVimproc') }
elseif has('kaoriya') && has('vim_starting')
  set runtimepath+=$VIM/plugins/vimproc
endif

Plug 'kana/vim-operator-user'

Plug 'kana/vim-operator-replace', {
      \ 'on': '<Plug>(operator-replace)'
      \ }

Plug 'rhysd/vim-operator-surround', {
      \ 'on': [
      \   '<Plug>(operator-surround-append)',
      \   '<Plug>(operator-surround-delete)',
      \   '<Plug>(operator-surround-replace)'
      \ ]}

Plug 'emonkak/vim-operator-comment', {
      \ 'on': [
      \   '<Plug>(operator-comment)',
      \   '<Plug>(operator-uncomment)'
      \ ]}

Plug 'kana/vim-textobj-user'

Plug 'kana/vim-textobj-entire', {
      \ 'on': [
      \   '<Plug>(textobj-entire-a)',
      \   '<Plug>(textobj-entire-i)'
      \ ]}

Plug 'kana/vim-textobj-line', {
      \ 'on': [
      \   '<Plug>(textobj-line-a)',
      \   '<Plug>(textobj-line-i)'
      \ ]}

Plug 'thinca/vim-textobj-comment', {
      \ 'on': [
      \   '<Plug>(textobj-comment-a)',
      \   '<Plug>(textobj-comment-i)'
      \ ]}

Plug 'osyo-manga/vim-textobj-multiblock', {
      \ 'on': [
      \   '<Plug>(textobj-multiblock-a)',
      \   '<Plug>(textobj-multiblock-i)'
      \ ]}

Plug 'kana/vim-smartinput', { 'on': [], 'insert': 1 }

Plug 'tomtom/tcomment_vim'

Plug 't9md/vim-quickhl', {
      \ 'on': [
      \   '<Plug>(quickhl-manual-this)',
      \   '<Plug>(quickhl-manual-reset)'
      \ ]}

Plug 'nathanaelkane/vim-indent-guides', {
      \ 'on': 'IndentGuidesToggle'
      \ }

Plug 'vim-scripts/ShowMarks7'

Plug 'taku-o/vim-fix-numbering' , {
      \ 'on': 'FixNumbering'
      \ }

Plug 'osyo-manga/vim-over' , {
      \ 'on': 'OverCommandLine'
      \ }

if executable('ctags')
  Plug 'vim-scripts/taglist.vim', {
      \ 'on': 'TlistToggle'
      \ }
endif

if executable('ag')
  Plug 'rking/ag.vim'
endif

Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp', { 'for': ['cpp', 'python', 'haskell', 'rust' ] }
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim', { 'on': [] } " on-demand load

Plug 'Shougo/neosnippet.vim', { 'on': [], 'insert': 1 }
" Plug 'Shougo/neosnippet-snippets'

Plug 'ctrlpvim/ctrlp.vim', {
      \ 'on': [
      \   'CtrlP',
      \   'CtrlPCurWD',
      \   'CtrlPCurFile',
      \   'CtrlPBuffer',
      \ ]}

Plug 'scrooloose/nerdtree', {
      \ 'on': 'NERDTreeToggle'
      \ }
Plug 'ryanoasis/vim-devicons'

Plug 'thinca/vim-quickrun', {
      \ 'on': [
      \   'QuickRun',
      \   '<Plug>(quickrun)'
      \ ]}

Plug 'osyo-manga/shabadou.vim', { 'on': [] }
Plug 'osyo-manga/vim-watchdogs', {
      \ 'on': [
      \   'WatchdogsRun',
      \   'WatchdogsRunSilent',
      \   'WatchdogsRunSweep',
      \ ]}

Plug 'tyru/open-browser.vim', {
      \ 'on': [
      \   'OpenBrowser',
      \   'OpenBrowserSearch',
      \   'OpenBrowserSmartSearch',
      \   '<Plug>(openbrowser-open)',
      \   '<Plug>(openbrowser-search)',
      \   '<Plug>(openbrowser-smart-search)',
      \ ]}

Plug 'kannokanno/previm', {
      \ 'on': 'PrevimOpen'
      \ }

Plug 'mattn/webapi-vim', { 'on': [] }
Plug 'mattn/excitetranslate-vim', {
      \ 'on': 'ExciteTranslate'
      \ }

if executable('w3m')
  Plug 'yuratomo/w3m.vim', {
        \ 'on': [
        \   'W3m',
        \   'W3mHistory',
        \   'W3mHistoryClear',
        \   'W3mLocal',
        \   'W3mSplit',
        \   'W3mTab',
        \   'W3mVSplit',
        \ ]}
endif

Plug 'tyru/restart.vim', {
      \ 'on': 'Restart'
      \ }

Plug 'lilydjwg/colorizer', { 'on': [] }

Plug 'itchyny/lightline.vim'

Plug 'deris/vim-loadafterft'

Plug 'vim-jp/vimdoc-ja'

Plug 'vim-scripts/Colour-Sampler-Pack'

" C/C++
Plug 'vim-jp/cpp-vim', {
      \ 'for': 'cpp'
      \ }

Plug 'vim-scripts/a.vim', {
      \ 'for': [ 'c', 'cpp' ]
      \ }

" Haskell
Plug 'neovimhaskell/haskell-vim', {
      \ 'for': 'haskell'
      \ }

if executable('stylish-haskell')
  Plug 'nbouscal/vim-stylish-haskell', {
      \ 'for': 'haskell'
      \ }
endif

" Markdown
Plug 'plasticboy/vim-markdown', {
      \ 'for': 'mkd'
      \ }


" load local plugins
function! s:load_local_plugins(dir)
  for pl in split(glob(a:dir), '\n')
    Plug pl
  endfor
endfunction
call s:load_local_plugins('$VIMLOCAL/plugins_local/*')

call plug#end()

let s:plug = {
      \   'plugs': get(g:, 'plugs', {}),
      \   'plugs_order': get(g:, 'plugs_order', {})
      \ }

function! s:plug.is_installed(name)
  return has_key(self.plugs, a:name) ? isdirectory(self.plugs[a:name].dir) : 0
endfunction

function! s:plug.is_loaded(name)
  return has_key(self.plugs, a:name) ? &runtimepath =~ self.plugs[a:name].dir : 0
endfunction

" additional on-demand load
"
" insert mode
function! s:plug.load_on_insert()
  for name in self.plugs_order
    if get(self.plugs[name], 'insert', 0)
      call plug#load(name)
    endif
  endfor
endfunction

augroup _plug_load_on_insert
  au!
  au InsertEnter * call s:plug.load_on_insert() | au! _plug_load_on_insert
augroup END

" register configuration function when loaded
function! s:plug.register_hook(name)
  let subname = substitute(a:name, '[-\|.]', '_', 'g')
  let aug = '_plug_'.subname
  let fnc = 's:plug_'.subname.'()'
  exe 'augroup '.aug
  exe ' au!'
  exe ' au User '.a:name.' call '.fnc.' | au! '.aug
  exe 'augroup END'
endfunction

" user command
command! PS PlugStatus
command! PU PlugUpdate | PlugUpgrade

" vim-operator-replace {{{1
"
if s:plug.is_installed('vim-operator-replace')
  " Example
  "   Riw 単語をレジスタの文字で置換え
  "   Ri# #で囲まれた範囲をレジスタの文字で置換え
  map <silent>R <Plug>(operator-replace)
endif

" vim-textobj-entire {{{1
"
if s:plug.is_installed('vim-textobj-entire')
  omap ae <Plug>(textobj-entire-a)
  omap ie <Plug>(textobj-entire-i)
  xmap ae <Plug>(textobj-entire-a)
  xmap ie <Plug>(textobj-entire-i)
endif

" vim-textobj-line {{{1
"
if s:plug.is_installed('vim-textobj-line')
  omap al <Plug>(textobj-line-a)
  omap il <Plug>(textobj-line-i)
  xmap al <Plug>(textobj-line-a)
  xmap il <Plug>(textobj-line-i)
endif

" vim-textobj-comment {{{1
"
if s:plug.is_installed('vim-textobj-comment')
  omap ac <Plug>(textobj-comment-a)
  omap ic <Plug>(textobj-comment-i)
  xmap ac <Plug>(textobj-comment-a)
  xmap ic <Plug>(textobj-comment-i)
endif

" vim-textobj-multiblock {{{1
"
if s:plug.is_installed('vim-textobj-multiblock')
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  xmap ab <Plug>(textobj-multiblock-a)
  xmap ib <Plug>(textobj-multiblock-i)
endif

" vim-operator-surround {{{1
"
if s:plug.is_installed('vim-operator-surround')
  " Example
  "   Saiw( 単語を(で囲む
  "   Sda(  単語を囲む(を削除
  "   Sra({ 単語を囲む(を{に変更
  map <silent>Sa <Plug>(operator-surround-append)
  map <silent>Sd <Plug>(operator-surround-delete)
  map <silent>Sr <Plug>(operator-surround-replace)
endif

" vim-operator-comment {{{1
"
if s:plug.is_installed('vim-operator-comment')
  map <silent>Xc <Plug>(operator-comment)
  map <silent>Xd <Plug>(operator-uncomment)
endif

" vim-smartinput {{{1
"
if s:plug.is_installed('vim-smartinput')
  function! s:plug_vim_smartinput()
    let cr = '<CR>'

    " ruby
    for ptn in [
          \ '^\s*\%(module\|def\|class\|if\|unless\|for\|while\|until\|case\)\>\%(.*[^.:@$]\<end\>\)\@!.*\%#',
          \ '^\s*\%(begin\)\s*\%#',
          \ '\%(^\s*#.*\)\@<!do\%(\s*|\k\+\%(\s*,\s*\k\+\)*|\)\?\s*\%#',
          \ ]
      call smartinput#define_rule({
            \ 'at': ptn,
            \ 'char': '<CR>',
            \ 'input': cr.'end<Esc>O',
            \ 'filetype': ['ruby'],
            \ })
    endfor

    call smartinput#define_rule({
          \ 'at': '\<\%(if\|unless\)\>.*\%#',
          \ 'char': '<CR>',
          \ 'input': cr.'end<Esc>O',
          \ 'filetype': ['ruby'],
          \ 'syntax': ['rubyConditionalExpression']
          \ })

    " vim
    for word in ['function', 'if', 'for', 'while', 'try']
      call smartinput#define_rule({
            \ 'at': '^\s*'.word.'\>.*\%#',
            \ 'char': '<CR>',
            \ 'input': cr.'end'.word.'<Esc>O',
            \ 'filetype': ['vim'],
            \ })
    endfor

    " sh
    for pair in [
          \ [ '^\s*if\>.*\%#', 'fi' ],
          \ [ '^\s*case\>.*\%#', 'esac'],
          \ [ '\%(^\s*#.*\)\@<!do\>.*\%#', 'done' ],
          \ ]
      call smartinput#define_rule({
            \ 'at': pair[0],
            \ 'char': '<CR>',
            \ 'input': cr.pair[1].'<Esc>O',
            \ 'filetype': ['sh', 'zsh'],
            \ })
    endfor
  endfunction

  call s:plug.register_hook('vim-smartinput')
endif

" vim-quickhl {{{1
"
if s:plug.is_installed('vim-quickhl')
  " カーソル下の単語、または選択範囲をハイライト
  nmap <LEADER>m <Plug>(quickhl-manual-this)
  xmap <LEADER>m <Plug>(quickhl-manual-this)
  " すべてのハイライトをクリア
  nmap <LEADER>M <Plug>(quickhl-manual-reset)
  xmap <LEADER>M <Plug>(quickhl-manual-reset)
endif

" indent-guides {{{1
"
if s:plug.is_installed('vim-indent-guides')
  " 有効/無効トグル
  noremap [toggle]i :<C-u>IndentGuidesToggle<CR>

  function! s:plug_vim_indent_guides()
    " デフォルトは無効にしておく <LEADER><LEADER>iで有効化
    let g:indent_guides_enable_on_vim_startup = 0
    " ガイドを見やすく
    let g:indent_guides_color_change_percent = 5
    let g:indent_guides_guide_size = 1
  endfunction

  call s:plug.register_hook('vim-indent-guides')
endif

" ShowMarks7 {{{1
"
if s:plug.is_installed('ShowMarks7')
  let showmarks_enable = 1
  " Show which marks
  let showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  " help、quickfixと編集不可のバッファのマークを表示しない
  let showmarks_ignore_type = 'hqm'
  " Hilight lower & upper marks
  " let showmarks_hlline_lower = 1
  " let showmarks_hlline_upper = 1

  " color setting
  function! s:chg_showmarks_color()
    hi! link SignColumn LineNr
    hi! link ShowMarksHLl LineNr
    hi! link ShowMarksHLu LineNr
    hi! link ShowMarksHLo LineNr
    hi! link ShowMarksHLm LineNr
  endfunction

  augroup _chg_showmarks_colors
    au! ColorScheme * call s:chg_showmarks_color()
  augroup END

  " change keymap
  map mt <Plug>ShowmarksShowMarksToggle
  map mo <Plug>ShowmarksShowMarksOn
  map mm <Plug>ShowmarksPlaceMark
  map mc <Plug>ShowmarksClearMark
  map mM <Plug>ShowmarksClearAll
  nnoremap <silent><Plug>ShowmarksShowMarksToggle :<C-u>ShowMarksToggle<CR>
  nnoremap <silent><Plug>ShowmarksShowMarksOn :<C-u>ShowMarksOn<CR>
  nnoremap <silent><Plug>ShowmarksPlaceMark :<C-u>ShowMarksPlaceMark<CR>
  nnoremap <silent><Plug>ShowmarksClearMark :<C-u>ShowMarksClearMark<CR>
  nnoremap <silent><Plug>ShowmarksClearAll :<C-u>ShowMarksClearAll<CR>
endif

" vim-over {{{1
"
if s:plug.is_installed('vim-over')
  nnoremap <silent><LEADER>: :OverCommandLine<CR>
  " カーソル下の単語をハイライト付きで置換
  " nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
  " コピーした文字列をハイライト付きで置換
  " nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
endif

" taglist.vim {{{1
"
if s:plug.is_installed('taglist.vim')
  " taglist開閉トグル
  nnoremap [toggle]t :TlistToggle<CR>

  function! s:plug_taglist_vim()
    " 現在表示中のファイルのみのタグしか表示しない
    let g:Tlist_Show_One_File = 1
    " taglisの幅
    let g:Tlist_WinWidth = 40
    " 右側にtaglistを表示
    let g:Tlist_Use_Right_Window = 1
    " taglistのウインドウだけならvimを閉じる
    let g:Tlist_Exit_OnlyWindow = 1
  endfunction

  call s:plug.register_hook('taglist.vim')
endif

" gtags.vim {{{1
"
if s:plug.is_installed('gtags')
  nnoremap <silent><C-g>j :<C-u>Gtags <C-r><C-w><CR>
  nnoremap <silent><C-g>k :<C-u>Gtags -r <C-r><C-w><CR>
  nnoremap <silent><C-g>l :<C-u>Gtags -f %<CR>
  nnoremap <silent><C-g>g :<C-u>Gtags -g<CR>
endif

" a.vim {{{1
"
if s:plug.is_installed('a.vim')
  function! s:plug_a_vim()
    nnoremap [avim] <Nop>
    nmap     <LEADER>a [avim]

    " C/C++のヘッダーとソースを切り替える
    nnoremap <silent>[avim]a :<C-u>A<CR>
    " 縦分割で開く
    nnoremap <silent>[avim]v :<C-u>AV<CR>
    " 横分割で開く
    nnoremap <silent>[avim]s :<C-u>AS<CR>
    " 新規タブで開く
    nnoremap <silent>[avim]t :<C-u>AT<CR>
    " 以下はマッピング済み
    " <Leader>ih  カーソル下のファイルを開く
    " <Leader>is  カーソル下のファイルに対応するヘッダー/ソースを分割して開く
    " <Leader>ihn 循環マッチ?
  endfunction

  call s:plug.register_hook('a.vim')
endif

" ag.vim {{{1
"
if s:plug.is_installed('ag.vim')
  let g:ag_prg="ag --vimgrep --smart-case"
endif

" ctrlp.vim {{{1
"
if s:plug.is_installed('ctrlp.vim')
  let g:ctrlp_map = '<Nop>'
  let g:ctrlp_show_hidden = 1
  let g:ctrlp_switch_buffer = ''
  let g:ctrlp_cache_dir = $CACHE_ROOT.'/ctrlp'
  " ctrlp_user_commandを使う場合は使用されない
  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](\.git|\.hg|\.svn|bin|build|target)$',
    \ 'file': '\v\.(o|d|so|out|exe|dll|class)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }
  nnoremap <silent><LEADER>f :<C-u>CtrlPCurWD<CR>
  nnoremap <silent><LEADER>F :<C-u>CtrlPCurFile<CR>
  nnoremap <silent><LEADER>b :<C-u>CtrlPBuffer<CR>
  let g:ctrlp_prompt_mappings = {
    \ 'PrtCurLeft()':         ['<left>', '<c-^>'],
    \ 'PrtBS()':              ['<bs>', '<c-]>', '<c-h>'],
    \ 'AcceptSelection("h")': ['<c-cr>', '<c-s>'],
    \ 'PrtDeleteEnt()':       ['<F7>', '<c-x>'],
    \ }

  if executable('ag')
    let g:ctrlp_user_command = 'ag %s -il --nocolor --nogroup --hidden -g ""'
    let g:ctrlp_use_caching = 0
  endif
endif

" NERDTree {{{1
"
if s:plug.is_installed('nerdtree')
  " NERDTree開閉トグル
  nnoremap [toggle]n :NERDTreeToggle<CR>
  nnoremap <silent><LEADER><Tab> :<C-u>call <SID>jump_nerdtree()<CR>

  " 無かったら開く、あったらフォーカス
  function! s:jump_nerdtree()
    let num = g:my.find_window_if("&filetype == 'nerdtree'")
    if num
      exe num.'wincmd w'
    else
      exe 'NERDTreeToggle'
    endif
  endfunction

  function! s:plug_nerdtree()
    " NERDTreeの幅
    " let g:NERDTreeWinSize=40
    " 左側にNERDTreeを表示
    let g:NERDTreeWinPos = "left"
    " 隠しファイルを表示する
    let g:NERDTreeShowHidden = 1
    " ディレクトリのアイコン表示
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    " NERDTreeのウインドウだけならvimを閉じる
    augroup _close_nerdtree_only
      au!
      au bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType")
            \ && b:NERDTreeType == "primary") | q | endif
    augroup END
  endfunction

  call s:plug.register_hook('nerdtree')
endif

" vim-lsp {{{1
"
if s:plug.is_installed('vim-lsp')
  function! s:plug_vim_lsp()

    function! s:find_root_uri(names)
      let root_uri = lsp#utils#path_to_uri(
      \  lsp#utils#find_nearest_parent_file_directory(
      \    lsp#utils#get_buffer_path(), a:names))
      return empty(root_uri) ? '.' : root_uri
    endfunction

    " cquery (c/cpp)
    if executable('cquery')
      au User lsp_setup call lsp#register_server({
        \   'name': 'cquery',
        \   'cmd': { server_info->['cquery'] },
        \   'root_uri': { server_info->s:find_root_uri(
        \     ['compile_commands.json', '.cquery']) },
        \   'initialization_options': { 'cacheDirectory': $CACHE_ROOT.'/cquery' },
        \   'whitelist': ['c', 'cc', 'cpp', 'cxx', 'objc', 'objcpp'],
        \ })
    endif

    " pyls (python)
    if executable('pyls')
      au User lsp_setup call lsp#register_server({
        \   'name': 'pyls',
        \   'cmd': { server_info -> ['pyls'] },
        \   'whitelist': ['python'],
        \   'workspace_config': {'pyls': {'plugins': {
        \     'pycodestyle': {'enabled': v:true },
        \     'jedi_definition': {
        \       'follow_imports': v:true,
        \       'follow_builtin_imports': v:true 
        \     },
        \   }}}
        \ })
    endif

    " haskell-ide-engine (haskell)
    if executable('hie')
      au User lsp_setup call lsp#register_server({
        \   'name': 'hie',
        \   'cmd': { server_info->['stack', 'exec', '--', 'hie-wrapper', '--lsp'] },
        \   'root_uri': { server_info->s:find_root_uri(['stack.yaml']) },
        \   'whitelist': ['haskell'],
        \ })
    endif

    " rls (rust)
    if executable('rls')
      au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
        \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
        \ 'whitelist': ['rust'],
        \ })
    endif

    " asyncomplete-lsp on-demand load
    if s:plug.is_loaded('vim-lsp')
      call plug#load('asyncomplete-lsp.vim')
    endif

    " for debug
    " let g:lsp_log_verbose = 1
    " let g:lsp_log_file = expand('~/vim-lsp.log')
  endfunction

  call s:plug.register_hook('vim-lsp')
endif

" asyncomplete.vim {{{1
"
if s:plug.is_installed('asyncomplete.vim')
  " insert selected candidate and close popup menu 
  inoremap <expr><C-y> pumvisible() ? asyncomplete#close_popup() : "\<C-y>"
  " cancel completion and close popup menu
  inoremap <expr><C-e> pumvisible() ? asyncomplete#cancel_popup() : "\<C-e>"
  " for debug
  " let g:asyncomplete_log_file = expand('~/asyncomplete.log')
endif

" neosnippet.vim {{{1
"
if s:plug.is_installed('neosnippet.vim')
  function! s:plug_neosnippet_vim()
    " cache directory
    let g:neosnippet#data_directory = $CACHE_ROOT.'/neosnippet'
    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif

    " Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1

    " disable runtime snippets
    let g:neosnippet#disable_runtime_snippets = { '_': 1, }

    " initialize snippets directory
    let g:neosnippet#snippets_directory = []

    " load my snippets
    let mysnip = $VIMLOCAL.'/snippets'
    if isdirectory(mysnip)
      let g:neosnippet#snippets_directory += [ mysnip ]
    endif

    " load Shougo/neosnippet-snippets
    if s:plug.is_installed('neosnippet-snippets')
      let g:neosnippet#snippets_directory += [ $VIMLOCAL.'/plugins/neosnippet-snippets/neosnippets' ]
    endif

    " load honza/vim-snippets
    if s:plug.is_installed('vim-snippets')
      let g:neosnippet#snippets_directory += [ $VIMLOCAL.'/plugins/vim-snippets/snippets' ]
    endif

    " Plugin key-mappings.
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
          \ "\<Plug>(neosnippet_expand_or_jump)"
          \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
          \ "\<Plug>(neosnippet_expand_or_jump)"
          \: "\<TAB>"
  endfunction

  call s:plug.register_hook('neosnippet.vim')
endif

" haskell-vim {{{1
"
if s:plug.is_installed('haskell-vim')
  " highlighting
  let g:haskell_enable_quantification = 1
  let g:haskell_enable_recursivedo = 1
  let g:haskell_enable_arrowsyntax = 1
  let g:haskell_enable_pattern_synonyms = 1
  let g:haskell_enable_typeroles = 1
  let g:haskell_enable_static_pointers = 1
  let g:haskell_backpack = 1
  " indent
  let g:haskell_indent_if = 3
  let g:haskell_indent_case = 2
  let g:haskell_indent_let = 4
  let g:haskell_indent_where = 6
  let g:haskell_indent_before_where = 2
  let g:haskell_indent_after_bare_where = 2
  let g:haskell_indent_do = 3
  let g:haskell_indent_in = 1
  let g:haskell_indent_guard = 2
  let g:haskell_indent_case_alternative = 1
  let g:cabal_indent_section = 2
endif

" quickrun.vim {{{1
"
if s:plug.is_installed('vim-quickrun')
  nmap <LEADER>r <Plug>(quickrun)

  function! s:plug_vim_quickrun()
    let g:quickrun_config = {}

    " default
    let g:quickrun_config['_'] = {
          \   'runner' : 'vimproc',
          \   'runner/vimproc/updatetime' : 80,
          \   'outputter' : 'error',
          \   'outputter/error/success' : 'buffer',
          \   'outputter/error/error' : 'quickfix',
          \   'outputter/buffer/split' : ':rightbelow 8sp',
          \   'hook/output_encode/enable' : 1,
          \   'hook/output_encode/encoding' : '&termencoding',
          \ }

    " debug
    " let g:quickrun_config['_'] = {
    "       \   'split': '',
    "       \ }

    " c++
    let g:quickrun_config['cpp'] = {
          \   'type':
          \     g:is_win && executable('cl') ? 'cpp/vc' :
          \     executable('clang++') ? 'cpp/clang++' :
          \     executable('g++') ? 'cpp/g++' : '',
          \ }

    let g:quickrun_config['cpp/clang++'] = {
          \   'cmdopt': '-std=c++17 -Wall -pthread',
          \ }

    let g:quickrun_config['cpp/g++'] = {
          \   'cmdopt': '-std=c++17 -Wall -pthread',
          \ }

    let g:quickrun_config['cpp/vc'] = {
          \   'cmdopt': '/nologo /EHsc',
          \   'exec': ['%c %o %s /Fo%s:p:r.obj /Fe%s:p:r.exe',
          \            '%s:p:r.exe %a'],
          \ }

    " ruby
    let g:quickrun_config['ruby'] = {
          \   'cmdopt': '-w',
          \ }

    " haskell
    let g:quickrun_config['haskell'] = {
          \   'type': executable('stack') ?
          \     'haskell/stack' : 'haskell/runghc'
          \ }

    let g:quickrun_config['haskell/stack'] = {
          \   'command': 'stack',
          \   'cmdopt' : 'runghc --plain',
          \   'tempfile': '%{tempname()}.hs',
          \   'hook/eval/template': 'main = print \$ %s',
          \ }

    " vbs
    let g:quickrun_config['vb'] = {
          \   'command': 'cscript.exe',
          \   'exec': '%C "%S"',
          \ }

    " dosbat
    let g:quickrun_config['dosbatch'] = {
          \   'exec': '%s %a',
          \ }

    " xml
    let g:quickrun_config['xml'] = {
          \   'type': 'open_browser',
          \ }

    " html
    let g:quickrun_config['html'] = {
          \   'type': 'open_browser',
          \ }

    " open by browser
    let g:quickrun_config['open_browser'] = {
          \   'exec': '"%S"',
          \   'runner': 'system',
          \   'outputter': 'browser',
          \ }

    " markdown
    let g:quickrun_config['markdown'] = {
          \   'type': 'previm',
          \ }

    " open by previm
    let g:quickrun_config['previm'] = {
          \   'exec': 'PrevimOpen',
          \   'runner': 'vimscript',
          \   'outputter': 'null',
          \ }

    " <C-c> で実行を強制終了させる
    " quickrun.vim が実行していない場合には <C-c> を呼び出す
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
  endfunction

  call s:plug.register_hook('vim-quickrun')
endif

" vim-watchdogs {{{1
"
if s:plug.is_installed('vim-watchdogs')
  noremap <silent><LEADER>w :<C-u>WatchdogsRun<CR>

  function! s:plug_vim_watchdogs()
    " load depend plugins
    call plug#load('vim-quickrun', 'shabadou.vim')

    " ファイル書き込み時にシンタックスチェックをする
    let g:watchdogs_check_BufWritePost_enable = 0
    " :wq時にシンタックスチェックをしない
    let g:watchdogs_check_BufWritePost_enable_on_wq = 0

    " c++
    let g:quickrun_config["cpp/watchdogs_checker"] = {
          \   'type':
          \     g:is_win && executable('cl') ? 'watchdogs_checker/msvc' :
          \     executable('clang++') ? 'watchdogs_checker/clang++' :
          \     executable('g++') ? 'watchdogs_checker/g++' : '',
          \ }

    let g:quickrun_config['cpp/watchdogs_checker/clang++'] = {
          \   'cmdopt': '-Wall',
          \ }

    let g:quickrun_config['cpp/watchdogs_checker/g++'] = {
          \   'cmdopt': '-Wall',
          \ }

    let g:quickrun_config['watchdogs_checker/msvc'] = {
          \   'cmdopt': '/nologo /EHsc',
          \ }
    " cs
    let g:quickrun_config['cs/watchdogs_checker'] = {
          \   'type':
          \     g:is_win && executable('csc') ? 'watchdogs_checker/csc' :
          \     executable('mcs') ? 'watchdogs_checker/mcs' : '',
          \ }

    let g:quickrun_config['watchdogs_checker/csc'] = {
          \   'command' : 'csc',
          \   'cmdopt' : '/nologo',
          \   'exec': '%c %o %s:p:gs?/?\\?',
          \   'quickfix/errorformat' : '%f\\(%l\\,%c\\):\ error\ CS%n:\ %m',
          \ }

    let g:quickrun_config['watchdogs_checker/mcs'] = {
          \   'command' : 'mcs',
          \   'cmdopt' : '--parse',
          \   'exec' : '%c %o %s:p',
          \   'quickfix/errorformat' : '%f\\(%l\\,%c\\):\ error\ CS%n:\ %m',
          \ }

    " java
    let g:quickrun_config['watchdogs_checker/javac'] = {
          \   'command' : 'javac',
          \   'exec' : '%c %o -d %s:p:h %s:p',
          \   'hook/sweep/files': '%s:p:r.class',
          \   'errorformat': '%A%f:%l: %m,%-Z%p^,%+C%.%#,%-G%.%#',
          \ }

    " ruby
    let g:quickrun_config['cpp/watchdogs_checker/ruby'] = {
          \   'cmdopt': '-w',
          \ }

    call watchdogs#setup(g:quickrun_config)
  endfunction

  call s:plug.register_hook('vim-watchdogs')
endif

" open-browser.vim {{{1
"
if s:plug.is_installed('open-browser.vim')
  " カーソル下のURLをブラウザで開く
  nmap <LEADER>ob <Plug>(openbrowser-open)
  vmap <LEADER>ob <Plug>(openbrowser-open)
  " ググる
  nmap <LEADER>os <Plug>(openbrowser-smart-search)
  vmap <LEADER>os <Plug>(openbrowser-smart-search)
endif

" previm {{{1
"
if s:plug.is_installed('previm')
  function! s:plug_previm()
    call plug#load('open-browser.vim')
  endfunction

  call s:plug.register_hook('previm')
endif

" excitetranslate-vim {{{1
"
if s:plug.is_installed('excitetranslate-vim')
  function! s:plug_excitetranslate_vim()
    call plug#load('webapi-vim')
  endfunction

  call s:plug.register_hook('excitetranslate-vim')
endif

" restart.vim {{{1
"
if s:plug.is_installed('restart.vim')
  function! s:plug_restart_vim()
    " 終了時に保持するオプション
    let g:restart_sessionoptions
          \ = 'blank,buffers,curdir,folds,help,localoptions,tabpages'
  endfunction

  call s:plug.register_hook('restart.vim')
endif

" lightline.vim {{{1
"
if s:plug.is_installed('lightline.vim')
  let g:lightline = {
        \ 'colorscheme': 'jellybeans',
        \ 'active': {
        \   'left':  [ [ 'mode', 'paste' ],
        \              [ 'readonly', 'filename', 'modified' ] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'percent' ],
        \              [ 'filetype', 'fileencoding', 'fileformat' ] ],
        \ },
        \ 'inactive': {
        \   'left':  [ [ 'readonly', 'filename', 'modified' ] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'percent' ],
        \              [ 'filetype', 'fileencoding', 'fileformat' ] ],
        \ },
        \ 'component_function': {
        \   'mode':         'MyMode',
        \   'readonly':     'MyReadonly',
        \   'filename':     'MyFilename',
        \   'modified':     'MyModified',
        \   'filetype':     'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'fileformat':   'MyFileformat',
        \ }
        \ }

  function! s:special_filetype()
    return index([
          \   'help',
          \   'qf',
          \   'quickrun',
          \   'nerdtree',
          \ ], &ft) != -1
  endfunction

  function! MyMode()
    return  <SID>special_filetype() ? &ft :
          \ winwidth('.') < 50 ? '' : lightline#mode()
  endfunction

  function! MyReadonly()
    return  <SID>special_filetype() ? '' :
          \ &readonly ? 'RO' : ''
  endfunction

  function! MyFilename()
    return  &ft == 'quickrun' ? '' :
          \ &ft == 'nerdtree' ? '' :
          \ strlen(expand('%:t')) ? expand('%:t') : '[No Name]'
  endfunction

  function! MyModified()
    return  <SID>special_filetype() ? '' :
          \ &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyFiletype()
    return  <SID>special_filetype() || winwidth('.') < 60 ?  '' :
          \ (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft')
  endfunction

  function! MyFileencoding()
    return  <SID>special_filetype() || winwidth('.') < 60 ?  '' :
          \ (strlen(&fenc) ? &fenc : &enc)
  endfunction

  function! MyFileformat()
    return  <SID>special_filetype() || winwidth('.') < 60 ?  '' :
          \ &fileformat . ' ' . WebDevIconsGetFileFormatSymbol()
  endfunction
endif

" vim-loadafterft {{{1
"
if s:plug.is_installed('vim-loadafterft')
  " ftpluginロード後に実行するコマンド
  let g:execcmd_after_ftplugin = {
        \    '_': [
        \        'setlocal fo+=l fo+=m fo+=M fo+=B fo-=r fo-=o fo-=t',
        \    ],
        \ }

  " indentロード後に実行するコマンド
  " let g:execcmd_after_indent = {
  "       \    '_': [
  "       \        'setlocal fo-=t fo-=c fo-=r fo-=o',
  "       \    ],
  "       \    'php': [
  "       \        'setlocal fo-=t fo-=c fo-=r fo-=o',
  "       \    ],
  "       \ }
endif

" {{{1
" vim:set expandtab ft=vim ts=2 sts=2 sw=2 foldmethod=marker:
